{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Game","state","text","queuedLetters","speedMultiplier","hit","miss","letterObjects","changeValue","letter","refs","value","setState","isLetterQueued","includes","deleteQueuedLetter","ltr","indexOfLetter","findIndex","element","newQueuedLetters","filter","newLetterObjects","splice","createLetterObject","letterStyle","color","left","Math","floor","random","toString","top","animation","className","style","fallingLettersWindow","id","this","interval","setInterval","queueLetters","clearInterval","generatedLetter","String","fromCharCode","toLowerCase","length","accuracy","onChange","type","ref","maxLength","placeholder","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAGMA,G,iNACJC,MAAQ,CACNC,KAAM,GACNC,cAAe,GACfC,gBAAiB,EACjBC,IAAK,EACLC,KAAM,EACNC,cAAe,I,EAyBjBC,YAAc,WACZ,IAAIC,EAAS,EAAKC,KAAKD,OAAOE,MAC9B,EAAKC,SAAS,CACZV,KAAMO,IAER,EAAKI,eAAeJ,I,EAGtBI,eAAiB,SAACJ,GACZ,EAAKR,MAAME,cAAcW,SAASL,IACpC,EAAKM,mBAAmBN,GACxB,EAAKG,SAAS,CACZV,KAAM,MAIN,EAAKU,SAAS,CACZV,KAAM,GACNI,KAAM,EAAKL,MAAMK,KAAO,K,EAKhCS,mBAAqB,SAACC,GACpB,IAAIC,EAAgB,EAAKhB,MAAME,cAAce,WAAU,SAACC,GACtD,OAAOA,IAAYH,KAEjBI,EAAmB,EAAKnB,MAAME,cAAckB,QAAO,SAACZ,GACtD,OAAOA,IAAWO,KAGhBM,EAAmB,EAAKrB,MAAMM,cAClCe,EAAiBC,OAAON,EAAe,GAEvC,EAAKL,SAAS,CACZT,cAAeiB,EACfb,cAAee,EACfjB,IAAK,EAAKJ,MAAMI,IAAM,K,EAI1BmB,mBAAqB,SAACf,GACpB,IAUoBO,EAPhBS,EAAc,CAChBC,MAAO,QACPC,KALSC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAeC,WAAa,KAMrDC,IALQJ,KAAKC,MAAsB,GAAhBD,KAAKE,UAAeC,WAAa,KAMpDE,UAAW,eASb,EAAKrB,SAAS,CACZL,cAAc,GAAD,mBAAM,EAAKN,MAAMM,eAAjB,EAPKS,EAOwCP,EALxD,yBAAKyB,UAAU,MAAMC,MAAOV,GAA5B,IAA2CT,EAA3C,W,EASNoB,qBAAuB,WACrB,OACE,yBAAKC,GAAG,OACL,EAAKpC,MAAMM,gB,mFAxFG,IAAD,OAClB+B,KAAKC,SAAWC,aAAY,WAAM,EAAKC,iBAAiB,IAAOH,KAAKrC,MAAMG,mB,6CAI1EsC,cAAcJ,KAAKC,Y,qCAInB,IAAII,EAAkBC,OAAOC,aAAa,GAAKjB,KAAKC,MAAsB,GAAhBD,KAAKE,WAAgBgB,cACvC,KAApCR,KAAKrC,MAAME,cAAc4C,SACxBT,KAAKrC,MAAME,cAAcW,SAAS6B,IAAoBL,KAAKrC,MAAME,cAAc4C,QAAU,GAC1FT,KAAKG,gBAELH,KAAK1B,SAAS,CACZT,cAAc,GAAD,mBAAMmC,KAAKrC,MAAME,eAAjB,CAAgCwC,MAE/CL,KAAKd,mBAAmBmB,O,+BA6E5B,IAAIK,EAAW,EAMf,OAJEA,EADoB,IAAnBV,KAAKrC,MAAMI,KAAiC,IAApBiC,KAAKrC,MAAMK,KACzB,IAEDsB,KAAKC,MAAsB,IAAfS,KAAKrC,MAAMI,KAAUiC,KAAKrC,MAAMK,KAAKgC,KAAKrC,MAAMI,MAGtE,yBAAKgC,GAAG,cACN,uBAAMD,qBAAN,MACA,yBAAKC,GAAG,gBACN,2BAAOY,SAAUX,KAAK9B,YAAa0C,KAAK,OAAOC,IAAI,SAASC,UAAU,IAAIzC,MAAO2B,KAAKrC,MAAMC,KAAMmD,YAAY,cAC9G,yBAAKhB,GAAG,mBACN,2CAAiBW,EAAjB,KACA,sCAAYV,KAAKrC,MAAMI,KACvB,yCAAeiC,KAAKrC,MAAMK,a,GAtHnBgD,IAAMC,YAoIVC,MANf,WACE,OACE,kBAAC,EAAD,OCvHgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ad9fa7b7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Game extends React.Component {\n  state = {\n    text: \"\",\n    queuedLetters: [],\n    speedMultiplier: 1,\n    hit: 0,\n    miss: 0,\n    letterObjects: []\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() =>{this.queueLetters()},(1000 * this.state.speedMultiplier));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  queueLetters() {\n    let generatedLetter = String.fromCharCode(65 + Math.floor(Math.random() * 26)).toLowerCase(); \n    if (this.state.queuedLetters.length !== 26){\n      if(this.state.queuedLetters.includes(generatedLetter) && this.state.queuedLetters.length <= 25)\n        this.queueLetters();\n      else {\n        this.setState({\n          queuedLetters: [...this.state.queuedLetters, generatedLetter]\n        })\n        this.createLetterObject(generatedLetter)\n      } \n    }\n  }\n\n  changeValue = () => {\n    let letter = this.refs.letter.value;\n    this.setState({\n      text: letter\n    });\n    this.isLetterQueued(letter);\n  }\n\n  isLetterQueued = (letter) => {\n    if (this.state.queuedLetters.includes(letter)) {\n      this.deleteQueuedLetter(letter)\n      this.setState({\n        text: \"\"\n      })\n    }\n      else {\n        this.setState({\n          text: \"\",\n          miss: this.state.miss + 1\n      })\n    }\n  }\n\n  deleteQueuedLetter = (ltr) => {\n    let indexOfLetter = this.state.queuedLetters.findIndex((element)=>{\n      return element === ltr;\n    })\n    let newQueuedLetters = this.state.queuedLetters.filter((letter) => {\n      return letter !== ltr;\n    }) \n\n    let newLetterObjects = this.state.letterObjects;\n    newLetterObjects.splice(indexOfLetter, 1);\n    \n    this.setState({\n      queuedLetters: newQueuedLetters,\n      letterObjects: newLetterObjects,\n      hit: this.state.hit + 1\n    })\n  }\n\n  createLetterObject = (letter) => {\n    let left = Math.floor(Math.random() * 70).toString() + \"vw\";\n    let top = Math.floor(Math.random() * 50).toString() + \"vh\";\n\n    let letterStyle = {\n      color: 'white',\n      left: left,\n      top: top,\n      animation: 'fallDown 1s'\n    }\n\n    let letterObject = (ltr) => {\n      return (\n        <div className=\"ltr\" style={letterStyle}> {ltr} </div>\n      )\n    }\n\n    this.setState({\n      letterObjects: [...this.state.letterObjects, letterObject(letter)]\n    })\n  }\n\n  fallingLettersWindow = () => {\n    return (\n      <div id=\"FLW\">\n        {this.state.letterObjects}\n      </div>\n    )\n  }\n\n  render() {\n    let accuracy = 0;\n    if(this.state.hit === 0 && this.state.miss === 0)\n      accuracy = 100\n    else\n     accuracy = Math.floor((this.state.hit*100)/(this.state.miss+this.state.hit));\n\n    return (\n      <div id=\"gameWindow\">\n        <this.fallingLettersWindow/>\n        <div id=\"controlPanel\">\n          <input onChange={this.changeValue} type=\"text\" ref=\"letter\" maxLength=\"1\" value={this.state.text} placeholder=\"Type here\"></input>\n          <div id=\"accuracyCounter\">\n            <span>Accuracy: {accuracy}%</span>\n            <span>Hit: {this.state.hit}</span>\n            <span>Missed: {this.state.miss}</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}